// Mocks generated by Mockito 5.0.15 from annotations
// in rental/test/features/auth/bloc/genfile.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i5;
import 'package:http/http.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rental/core/models/user.dart' as _i4;
import 'package:rental/features/auth/data_provider/local_provider.dart' as _i2;
import 'package:rental/features/auth/data_provider/remote_provider.dart' as _i3;
import 'package:rental/features/auth/failures/auth_failure.dart' as _i8;
import 'package:rental/features/auth/models/params/auth_signin_param.dart'
    as _i10;
import 'package:rental/features/auth/repository/repository.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAuthLocalDataProvider_0 extends _i1.Fake
    implements _i2.AuthLocalDataProvider {}

class _FakeAuthRemoteDataProvider_1 extends _i1.Fake
    implements _i3.AuthRemoteDataProvider {}

class _FakeUser_2 extends _i1.Fake implements _i4.User {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthLocalDataProvider get getLocalProvider =>
      (super.noSuchMethod(Invocation.getter(#getLocalProvider),
              returnValue: _FakeAuthLocalDataProvider_0())
          as _i2.AuthLocalDataProvider);
  @override
  _i3.AuthRemoteDataProvider get getRemoteProvider =>
      (super.noSuchMethod(Invocation.getter(#getRemoteProvider),
              returnValue: _FakeAuthRemoteDataProvider_1())
          as _i3.AuthRemoteDataProvider);
  @override
  void set(_i3.AuthRemoteDataProvider? authRemoteDataProvider) =>
      super.noSuchMethod(Invocation.method(#set, [authRemoteDataProvider]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthRemoteDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataProvider extends _i1.Mock
    implements _i3.AuthRemoteDataProvider {
  MockAuthRemoteDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i4.User get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: _FakeUser_2())
          as _i4.User);
  @override
  _i7.Future<_i5.Either<_i8.AuthFaiulre, _i4.User>> createUser(
          {_i9.Client? client, _i10.AuthSignUpParam? authSignUpParam}) =>
      (super.noSuchMethod(
              Invocation.method(#createUser, [],
                  {#client: client, #authSignUpParam: authSignUpParam}),
              returnValue: Future<_i5.Either<_i8.AuthFaiulre, _i4.User>>.value(
                  _FakeEither_3<_i8.AuthFaiulre, _i4.User>()))
          as _i7.Future<_i5.Either<_i8.AuthFaiulre, _i4.User>>);
  @override
  _i7.Future<_i5.Either<_i8.AuthFaiulre, String>> attemptLogin(
          {_i9.Client? client, _i10.AuthSignInParam? userParams}) =>
      (super.noSuchMethod(
          Invocation.method(
              #attemptLogin, [], {#client: client, #userParams: userParams}),
          returnValue: Future<_i5.Either<_i8.AuthFaiulre, String>>.value(
              _FakeEither_3<_i8.AuthFaiulre, String>())) as _i7
          .Future<_i5.Either<_i8.AuthFaiulre, String>>);
  @override
  _i7.Future<_i5.Either<_i8.AuthFaiulre, _i4.User>> currentUser(
          {String? token}) =>
      (super.noSuchMethod(Invocation.method(#currentUser, [], {#token: token}),
              returnValue: Future<_i5.Either<_i8.AuthFaiulre, _i4.User>>.value(
                  _FakeEither_3<_i8.AuthFaiulre, _i4.User>()))
          as _i7.Future<_i5.Either<_i8.AuthFaiulre, _i4.User>>);
  @override
  _i7.Future<void> uploadProfileImage(String? path) =>
      (super.noSuchMethod(Invocation.method(#uploadProfileImage, [path]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i4.User> updateUser(_i4.User? user) =>
      (super.noSuchMethod(Invocation.method(#updateUser, [user]),
              returnValue: Future<_i4.User>.value(_FakeUser_2()))
          as _i7.Future<_i4.User>);
  @override
  String toString() => super.toString();
}
